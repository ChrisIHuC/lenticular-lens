{
  "EXACT": {
    "label": "Exact match",
    "description": "Aligns source and target’s IRIs whenever their respective user selected property values are identical.",
    "threshold_range": "{0, 1}",
    "match": "{source} = {target}",
    "accepts_similarity_method": false,
    "is_similarity_method": false,
    "items": {}
  },
  "INTERMEDIATE": {
    "label": "Intermediate dataset",
    "description": "The method aligns the source and the target’s IRIs via an intermediate database by using properties that potentially present different descriptions of the same entity, such as country name and country code. This is possible by providing an intermediate dataset that binds the two alternative descriptions to the very same identifier.",
    "threshold_range": "{0, 1}",
    "match": "{source_intermediate} = {target_intermediate}",
    "accepts_similarity_method": false,
    "is_similarity_method": false,
    "items": {
      "entity_type_selection": {
        "label": "Intermediate dataset",
        "type": "entity_type_selection"
      },
      "intermediate_source": {
        "label": "Source",
        "type": "property",
        "default_value": [
          [
            ""
          ]
        ],
        "entity_type_selection_key": "entity_type_selection"
      },
      "intermediate_target": {
        "label": "Target",
        "type": "property",
        "default_value": [
          [
            ""
          ]
        ],
        "entity_type_selection_key": "entity_type_selection"
      }
    }
  },
  "LEVENSHTEIN_DISTANCE": {
    "label": "Levenshtein distance",
    "description": "This method is used to align source and target’s IRIs whenever the distance of their respective user selected property values are above a given Levenshtein edit distance threshold. Edit distance is a way of quantifying how dissimilar two strings (e.g., words) are to one another by counting the minimum number of operations ε (removal, insertion, or substitution of a character in the string) required to transform one string into the other.",
    "threshold_range": "ℕ",
    "match": "levenshtein({source}, {target}, {max_distance})",
    "similarity": "similarity({source}, {target}, levenshtein({source}, {target}, {max_distance}))",
    "condition": "{match} <= {max_distance}",
    "accepts_similarity_method": false,
    "is_similarity_method": true,
    "items": {
      "max_distance": {
        "label": "Maximum distance",
        "type": "number",
        "default_value": 1,
        "step": 1,
        "min_excl_value": 0,
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/maxDistance",
          "prefix": "",
          "uri": ""
        }
      }
    }
  },
  "LEVENSHTEIN_NORMALIZED": {
    "label": "Levenshtein normalized",
    "description": "This method is used to align source and target’s IRIs whenever the similarity score of their respective user selected property values are above a given Levenshtein threshold. Edit distance is a way of quantifying how dissimilar two strings (e.g., words) are to one another by counting the minimum number of operations ε (removal, insertion, or substitution of a character in the string) required to transform one string into the other.",
    "threshold_range": "]0, 1]",
    "similarity": "similarity({source}, {target}, levenshtein({source}, {target}, -1))",
    "condition": "{similarity} >= {threshold}",
    "accepts_similarity_method": false,
    "is_similarity_method": true,
    "items": {
      "threshold": {
        "label": "Similarity threshold",
        "type": "range",
        "default_value": 0.7,
        "step": 0.05,
        "min_excl_value": 0,
        "max_excl_value": 1,
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/hasThresholdAcceptanceOperator",
          "prefix": "voidPlus",
          "uri": "http://lenticularlens.org/void+/"
        }
      }
    }
  },
  "SOUNDEX": {
    "label": "Soundex",
    "description": "Soundex is a phonetic algorithm for indexing names by sound, as pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling. The algorithm mainly encodes consonants; a vowel will not be encoded unless it is the first letter.",
    "threshold_range": "{0, 1}",
    "field": "soundex({property}, {size})",
    "accepts_similarity_method": true,
    "is_similarity_method": false,
    "items": {
      "size": {
        "label": "Soundex size",
        "type": "range",
        "default_value": 4,
        "step": 1,
        "min_value": 1,
        "max_value": 5,
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/soundexSize",
          "prefix": "voidPlus",
          "uri": "http://lenticularlens.org/void+/"
        }
      }
    }
  },
  "BLOOTHOOFT": {
    "label": "Gerrit Bloothooft",
    "description": "Gerrit Bloothooft description",
    "threshold_range": "{0, 1}",
    "field": "bloothooft({property}, {name_type})",
    "accepts_similarity_method": true,
    "is_similarity_method": false,
    "items": {
      "name_type": {
        "label": "Type of name",
        "type": "choices",
        "choices": {
          "first_name": "First name",
          "family_name": "Family name"
        },
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/BloothooftNameType",
          "prefix": "voidPlus",
          "uri": "http://lenticularlens.org/void+/"
        }
      }
    }
  },
  "WORD_INTERSECTION": {
    "label": "Word Intersection",
    "description": "The word intersection approximation method is originally designed to find a subset of words within a larger text. However, it could also be used for any pair of strings regardless of the strings sizes.",
    "threshold_range": "]0, 1]",
    "similarity": "word_intersection({source}, {target}, {ordered}, {approximate}, {stop_symbols})",
    "condition": "{similarity} >= {threshold}",
    "accepts_similarity_method": false,
    "is_similarity_method": true,
    "items": {
      "ordered": {
        "label": "Keep the order of the words",
        "type": "boolean",
        "default_value": false
      },
      "approximate": {
        "label": "Each word should be approximated",
        "type": "boolean",
        "default_value": true
      },
      "stop_symbols": {
        "label": "Stop symbols",
        "type": "string",
        "default_value": ".-,+'?;()–"
      },
      "threshold": {
        "label": "Similarity threshold",
        "type": "range",
        "default_value": 0.7,
        "step": 0.05,
        "min_excl_value": 0,
        "max_excl_value": 1,
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/hasThresholdAcceptanceOperator",
          "prefix": "voidPlus",
          "uri": "http://lenticularlens.org/void+/"
        }
      }
    }
  },
  "METAPHONE": {
    "label": "Metaphone",
    "description": "Metaphone description",
    "threshold_range": "{0, 1}",
    "field": "metaphone({property}, {max})",
    "accepts_similarity_method": true,
    "is_similarity_method": false,
    "items": {
      "max": {
        "label": "Maximum size",
        "type": "number",
        "default_value": 20,
        "step": 1,
        "min_value": 1,
        "max_value": 255
      }
    }
  },
  "DMETAPHONE": {
    "label": "Double Metaphone",
    "description": "Double Metaphone description",
    "threshold_range": "{0, 1}",
    "field": "dmetaphone({property})",
    "accepts_similarity_method": true,
    "is_similarity_method": false
  },
  "TRIGRAM": {
    "label": "Trigram",
    "description": "Trigram description",
    "threshold_range": "]0, 1]",
    "match": "{source} % {target}",
    "similarity": "similarity({source}, {target})",
    "before_index": "SELECT set_config('pg_trgm.similarity_threshold', {threshold}, true);",
    "index": "gin ({target} gin_trgm_ops)",
    "accepts_similarity_method": false,
    "is_similarity_method": true,
    "items": {
      "threshold": {
        "label": "Similarity threshold",
        "type": "range",
        "default_value": 0.7,
        "step": 0.05,
        "min_excl_value": 0,
        "max_excl_value": 1,
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/hasThresholdAcceptanceOperator",
          "prefix": "voidPlus",
          "uri": "http://lenticularlens.org/void+/"
        }
      }
    }
  },
  "NUMBERS_DELTA": {
    "label": "Numbers Delta",
    "description": "The numbers delta is used to align the source and the target by approximating the match of the numeric values of the selected properties according to a delta.",
    "threshold_range": "ℕ",
    "match": "delta({type}, {source}, {target}, {distance_start}, {distance_end})",
    "field_type": "number",
    "accepts_similarity_method": false,
    "is_similarity_method": false,
    "items": {
      "type": {
        "label": "Size difference",
        "type": "choices",
        "choices": {
          "<>": "Irrelevant",
          "<": "Source < Target",
          ">": "Source > Target"
        }
      },
      "start": {
        "label": "Start",
        "type": "number",
        "default_value": 0
      },
      "end": {
        "label": "End",
        "type": "number",
        "default_value": 0
      }
    }
  },
  "TIME_DELTA": {
    "label": "Time Delta",
    "description": "The time delta is used to align the source and the target by approximating the match of the date values of the selected properties according to a delta.",
    "threshold_range": "ℕ",
    "match": "delta({type}, {source}, {target}, {days} + ({months} * 30) + ({years} * 365))",
    "field_type": "date",
    "accepts_similarity_method": false,
    "is_similarity_method": false,
    "items": {
      "type": {
        "label": "Should occur before or after?",
        "type": "choices",
        "choices": {
          "<>": "Irrelevant",
          "<": "Source event before target event",
          ">": "Source event after target event"
        }
      },
      "years": {
        "label": "Years",
        "type": "number",
        "default_value": 0,
        "step": 1,
        "min_value": 0
      },
      "months": {
        "label": "Months",
        "type": "number",
        "default_value": 0,
        "step": 1,
        "min_value": 0
      },
      "days": {
        "label": "Days",
        "type": "number",
        "default_value": 0,
        "step": 1,
        "min_value": 0
      }
    }
  },
  "SAME_YEAR_MONTH": {
    "label": "Same Year/Month",
    "description": "An exact match of the year and/or month from the dates inputs.",
    "threshold_range": "{0, 1}",
    "field": "get_date_part({date_part}, {property})",
    "accepts_similarity_method": false,
    "is_similarity_method": false,
    "items": {
      "date_part": {
        "label": "Same Year/Month?",
        "type": "choices",
        "choices": {
          "year": "Year",
          "month": "Month",
          "year_month": "Year and Month"
        },
        "rdf": {
          "predicate": "http://www.w3.org/2006/time#unitType",
          "prefix": "time",
          "uri": "http://www.w3.org/2006/time#",
          "values": {
            "month": [
              {
                "predicate": "http://www.w3.org/2006/time#unitMonth",
                "prefix": "time",
                "uri": "http://www.w3.org/2006/time#"
              }
            ],
            "year": [
              {
                "predicate": "http://www.w3.org/2006/time#unitYear",
                "prefix": "time",
                "uri": "http://www.w3.org/2006/time#"
              }
            ],
            "year_month": [
              {
                "predicate": "http://www.w3.org/2006/time#unitYear",
                "prefix": "time",
                "uri": "http://www.w3.org/2006/time#"
              },
              {
                "predicate": "http://www.w3.org/2006/time#unitYear",
                "prefix": "time",
                "uri": "http://www.w3.org/2006/time#"
              }
            ]
          }
        }
      }
    }
  },
  "JARO": {
    "label": "Jaro",
    "description": "Jaro description",
    "threshold_range": "]0, 1]",
    "similarity": "jaro({source}, {target})",
    "condition": "{similarity} >= {threshold}",
    "accepts_similarity_method": false,
    "is_similarity_method": true,
    "items": {
      "threshold": {
        "label": "Similarity threshold",
        "type": "range",
        "default_value": 0.7,
        "step": 0.05,
        "min_excl_value": 0,
        "max_excl_value": 1,
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/hasThresholdAcceptanceOperator",
          "prefix": "voidPlus",
          "uri": "http://lenticularlens.org/void+/"
        }
      }
    }
  },
  "JARO_WINKLER": {
    "label": "Jaro-Winkler",
    "description": "Jaro-Winkler description",
    "threshold_range": "]0, 1]",
    "similarity": "jaro_winkler({source}, {target}, {prefix_weight})",
    "condition": "{similarity} >= {threshold}",
    "accepts_similarity_method": false,
    "is_similarity_method": true,
    "items": {
      "threshold": {
        "label": "Similarity threshold",
        "type": "range",
        "default_value": 0.7,
        "step": 0.05,
        "min_excl_value": 0,
        "max_excl_value": 1,
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/hasThresholdAcceptanceOperator",
          "prefix": "voidPlus",
          "uri": "http://lenticularlens.org/void+/"
        }
      },
      "prefix_weight": {
        "label": "Prefix weight",
        "type": "range",
        "default_value": 0.1,
        "step": 0.05,
        "min_value": 0.1,
        "max_value": 0.25,
        "rdf": {
          "predicate": "http://lenticularlens.org/void+/jaroWinklerPrefixWeight",
          "prefix": "voidPlus",
          "uri": "http://lenticularlens.org/void+/"
        }
      }
    }
  }
}